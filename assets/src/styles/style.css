@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .loading-elipsis::after {
    overflow: hidden;
    animation: ellipsis steps(4, end) 1500ms infinite;
    content: "...";
    width: 0;
    display: inline-block;
    vertical-align: bottom;
  }

  @keyframes ellipsis {
    to {
      width: 2.25em;
    }
  }

  .popin {
    animation: popin 200ms;
  }

  @keyframes popin {
    from {
      transform: scaleX(0.95);
      opacity: 0;
    }

    to {
      transform: scaleX(1);
      opacity: 1;
    }
  }

  @property --bg-angle {
    inherits: false;
    initial-value: 0deg;
    syntax: "<angle>";
  }

  @keyframes spin {
    to {
      --bg-angle: 360deg;
    }
  }

  .border-rainbow {
    animation: spin 2.5s infinite linear;
    background:
            linear-gradient(
                    to bottom,
                    oklch(0.1 0.2 240 / 0.95),
                    oklch(0.1 0.2 240 / 0.95)
            )
            padding-box,
            conic-gradient(
                    from var(--bg-angle) in oklch longer hue,
                    oklch(0.85 0.37 0) 0 0
            )
            border-box;
    border-style: solid;
    border-color: transparent;
  }
}

@layer components {


  .progress-alert {
    @apply bg-base-200 text-accent border-accent border shadow-md py-4 rounded-box popin;

    position: relative;

    pre {
      @apply px-5 leading-8 whitespace-pre-wrap flex;

      &::before {
        content: "> ";

        @apply shrink-0;
      }

      &.error-summary, &.warn-summary {
        @apply px-5 bg-warning text-warning-content;
      }

      &.done-summary, &.download-summary, &.redirect-summary {
        @apply px-5 bg-success text-success-content;
      }

      &.inprogress, &.statusupdate {
        span.loader {
          @apply pl-1;
          @apply loading-elipsis;
        }
      }

      &.statusupdate {
        span.status {
          @apply pl-1;

          &::before {
            content: "(";
          }

          &::after {
            content: ")";
          }
        }
      }

      &.done, &.error, &.warn {
        span.status {
          @apply pl-1;

          &::before {
            content: "...[";
          }

          &::after {
            content: "]";
          }
        }
      }
    }

    .close {
      @apply btn btn-sm btn-accent mr-4;
    }

    &-oneline {
      @apply flex;

      pre {
        @apply flex-grow;
      }
    }
  }
}

input:-webkit-autofill,
input:-webkit-autofill:focus {
  transition: background-color 600000s 0s, color 600000s 0s;
}
